#!/usr/bin/env python

fail_req=0
lst_all_req_time = []
import asyncore, socket
import logging
from cStringIO import StringIO
from urlparse import urlparse
import sys
import time

def make_request(req_type, what, details, ver="1.1"):
    """ Compose an HTTP request """
    NL = "\r\n"
    req_line = "{verb} {w} HTTP/{v}".format(
        verb=req_type, w=what, v=ver
    )
    details = [
        "{name}: {v}".format(name=n,v=v) for (n,v) in details.iteritems()
    ]
    detail_lines = NL.join(details)
    full_request = "".join([req_line, NL, detail_lines, NL, NL])
    return full_request

def parse_url(url, DEFAULT_PORT=80):
    """ Parse a given url into host, path, and port.
        Use DEFAULT_PORT (80) if unspecified.
    """
    parsed_url = urlparse(url)
    host, path, port = (parsed_url.hostname,
                        parsed_url.path,
                        parsed_url.port)
    if not port:
        port = DEFAULT_PORT
    return (host, path, port)


class HTTPClient(asyncore.dispatcher):
    ## Size of the buffer for each recv
    RECV_CHUNK_SIZE = 8192

    def __init__(self, url, num,count):
        asyncore.dispatcher.__init__(self)
        self.url = url
        host, path, port = parse_url(self.url)
        self.num = num
        self.start = 0
        self.end = 0
        self.count = count
        self.ini_count = count
        self.content_length = 0
        self.num_data_recv = 0
        global lst_all_req_time
        global fail_req
        # Create a logger
        self.logger = logging.getLogger(url)

        # Create a TCP socket to host at the right port
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

        self.host = host
        self.path = path

        # Create recv buffer and send buffer
        (self.recvbuf, self.sendbuf) = (StringIO(), "")
        if self.count==1:
            # Make an initial request & deliver it
            request = make_request('GET', path,
                {'Host': host,
                 'Connection': 'close', 'P2Tag': 'u5880068_u5880077'}
            )
        else:
            # Make an initial request & deliver it
            request = make_request('GET', path,
                {'Host': host,
                 'Connection': 'keep-alive', 'P2Tag': 'u5880068_u5880077' }
            )
        self.count-=1
        self.start_timer = time.time()
        self.write(request)

    def write(self, data):
        """ Schedule to deliver data over the socket """
        self.sendbuf += data

    def handle_connect(self):
        pass

    def handle_close(self):
        self.close()

    def writable(self):
        """ Check if there is anything to send """
        return len(self.sendbuf) > 0

    def handle_write(self):
        bytes_sent = self.send(self.sendbuf)
        self.sendbuf = self.sendbuf[bytes_sent:]

    def getInfo(self, header):
        data = header.replace("\n ", " ").splitlines()
        headers = {}
        for line in data:
            split_here = line.find(":")
            headers[line[:split_here]] = line[split_here+2:]
        return headers

    def handle_read(self):
        recv_bytes = self.recv(HTTPClient.RECV_CHUNK_SIZE)
        if self.ini_count-1 == self.count and self.content_length==0:
            head, ini_data = recv_bytes.split("\r\n\r\n")
            a= self.getInfo(head)
            if head.find("\r\n\r\n") != -1 or head.find("HTTP/1.1")!= -1:
                if head[:20].find("HTTP/1.1 2")==-1:
                    fail_req+=1
            self.content_length = int(a["Content-Length"])
            self.num_data_recv+=len(ini_data)
            self.recvbuf.write(ini_data)
        elif self.ini_count-1 == self.count:
            self.num_data_recv+=len(recv_bytes)
            self.recvbuf.write(recv_bytes)
        if self.ini_count-1 != self.count and self.content_length != self.num_data_recv:
            nl_find = recv_bytes.find("\r\n\r\n")
            if nl_find==-1:
                self.num_data_recv+=len(recv_bytes)
            else:
                self.num_data_recv+=len(recv_bytes[nl_find+4:])
                header=recv_bytes[:nl_find+4]
                if header.find("\r\n\r\n") != -1 or header.find("HTTP/1.1")!= -1:
                    if header[:20].find("HTTP/1.1 2")==-1:
                        fail_req+=1
        if self.content_length==self.num_data_recv and self.count == 1:
            self.end_timer=time.time()
            lst_all_req_time.append(self.end_timer-self.start_timer)
            self.num_data_recv=0
            self.count -= 1
            request = make_request('GET', self.path,
                {'Host': self.host,
                 'Connection': 'close', 'P2Tag': 'u5880068_u5880077'}
            )
            self.start_timer=time.time()
            self.write(request)

        elif self.content_length==self.num_data_recv and self.count>1:
            self.end_timer = time.time()
            lst_all_req_time.append(self.end_timer-self.start_timer)
            self.num_data_recv=0
            self.count -= 1
            request = make_request('GET', self.path,
                {'Host': self.host,
                 'Connection': 'keep-alive', 'P2Tag': 'u5880068_u5880077'}
            )
            self.start_timer=time.time()
            self.write(request)

if __name__ == "__main__":
    start_time =time.time()
    logging.basicConfig(level=logging.DEBUG,
        format="%(asctime)-15s %(name)s: %(message)s"
    )
    maxConcurrent = int(sys.argv[-2])
    numRequests = int(sys.argv[-4])
    servName = sys.argv[-1]

    requestsInOneTime = numRequests//maxConcurrent
    lst=[]
    for i in range(maxConcurrent):
        lst.append(HTTPClient(servName, i, requestsInOneTime))

    asyncore.loop()
    end_time = time.time()
    time_taken= end_time - start_time
    lst_all_req_time.sort()
    complete_req = numRequests -fail_req
    print "Time taken for tests: %s seconds" %(time_taken)
    print "Complete requests: %s" %(complete_req)
    print "Failed requests: %s" %(fail_req)
    print "Avg requests per second: %s [req/s]" % ((complete_req)/(time_taken))
    print ""
    print "Percentage of the requests served within a certain time (ms)"
    print "  50%    ",(((lst_all_req_time[int(len(lst_all_req_time)/2)])*10**3))

    print "  60%    ",(((lst_all_req_time[int(len(lst_all_req_time)/1.66666)])*10**3))
    print "  70%    ",(((lst_all_req_time[int(len(lst_all_req_time)/1.42857)])*10**3))
    print "  80%    ",(((lst_all_req_time[int(len(lst_all_req_time)/1.25)])*10**3))
    print "  90%    ",(((lst_all_req_time[int(len(lst_all_req_time)/1.11111)])*10**3))
    print " 100%    ",(((lst_all_req_time[int(len(lst_all_req_time)-1)])*10**3))
