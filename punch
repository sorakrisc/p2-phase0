#!/usr/bin/env python


import asyncore, socket
import logging
from cStringIO import StringIO
from urlparse import urlparse
import sys
import time


def make_request(req_type, what, details, ver="1.1"):
    """ Compose an HTTP request """
    NL = "\r\n"
    req_line = "{verb} {w} HTTP/{v}".format(
        verb=req_type, w=what, v=ver
    )
    details = [
        "{name}: {v}".format(name=n,v=v) for (n,v) in details.iteritems()
    ]
    detail_lines = NL.join(details)
    full_request = "".join([req_line, NL, detail_lines, NL, NL])
    return full_request

def parse_url(url, DEFAULT_PORT=80):
    """ Parse a given url into host, path, and port.
        Use DEFAULT_PORT (80) if unspecified.
    """
    parsed_url = urlparse(url)
    host, path, port = (parsed_url.hostname,
                        parsed_url.path,
                        parsed_url.port)
    if not port:
        port = DEFAULT_PORT
    return (host, path, port)


class HTTPClient(asyncore.dispatcher):
    ## Size of the buffer for each recv
    RECV_CHUNK_SIZE = 8192

    def __init__(self, url, num,count):
        asyncore.dispatcher.__init__(self)
        self.url = url
        host, path, port = parse_url(self.url)
        self.num = num
        self.start = 0
        self.end = 0
        self.count = count

        # Create a logger
        self.logger = logging.getLogger(url)

        # Create a TCP socket to host at the right port
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

        self.host = host
        self.path = path

        # Create recv buffer and send buffer
        (self.recvbuf, self.sendbuf) = (StringIO(), "")

        # Make an initial request & deliver it
        request = make_request('GET', path,
            {'Host': host,
             'Connection': 'keep-alive'}
        )
        self.count-=1
        self.write(request)

    def write(self, data):
        """ Schedule to deliver data over the socket """
        self.sendbuf += data

    def handle_connect(self):
        # start = time.handle_connect()
        self.start = time.time()

        print "connect>>>>>>>>", self.num
        # activate when  something connect
        self.logger.debug("Connected")

    def handle_close(self):
        self.end = time.time()
        totalTime = self.end-self.start
        print "CLOSE>>>>>", self.num," Time: ", totalTime
        self.logger.debug("Disconnected")
        self.close()


    def writable(self):
        """ Check if there is anything to send """
        return len(self.sendbuf) > 0

    def handle_write(self):
        bytes_sent = self.send(self.sendbuf)
        self.sendbuf = self.sendbuf[bytes_sent:]

    def getInfo(self, header):
        data = header.replace("\n ", " ").splitlines()
        headers = {}
        for line in data:
            split_here = line.find(":")
            headers[line[:split_here]] = line[split_here+2:]
        return headers

    def handle_error(self):
        pass

    def handle_read(self):
        recv_bytes = self.recv(HTTPClient.RECV_CHUNK_SIZE)
        # self.logger.debug("{} recvd {} bytes".format(self.num,len(recv_bytes)))
        if self.num == self.count:
            head, data = recv_bytes.split("\r\n\r\n")
            a= self.getInfo(head)
            # print "head: %s endhead" %(head)
            print "This is content-length: ",a["Content-Length"]


        self.recvbuf.write(recv_bytes)
        self.count -= 1
        if self.count == 1:
            request = make_request('GET', self.path,
                {'Host': self.host,
                 'Connection': 'close'}
            )
            self.write(request)
        elif self.count>1:
            request = make_request('GET', self.path,
                {'Host': self.host,
                 'Connection': 'keep-alive'}
            )
            self.write(request)
        # print "recv_bytes>>>>",recv_bytes, ": ",self.num
        print "self.num: ",self.num




if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG,
        format="%(asctime)-15s %(name)s: %(message)s"
    )
    maxConcurrent = int(sys.argv[-2])
    numRequests = int(sys.argv[-4])
    servName = sys.argv[-1]
    requestsInOneTime = numRequests//maxConcurrent
    print requestsInOneTime, "HIII"
    lst=[]
    for i in range(maxConcurrent):

        lst.append(HTTPClient(servName, i, requestsInOneTime))

    asyncore.loop()